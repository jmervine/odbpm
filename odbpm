#!/usr/bin/env bash
################################################################################
# Header
# file: ./lib/head.sh
################################################################################
# odbpm
#
# Author: @mervinej
# License: MIT
#
# DO NOT EDIT THIS FILE DIRECTLY!
#
# This file is generated using 'make' in it's root directory
# from files within ./lib
################################################################################


# Argument Parser and Usage
# file: ./lib/_args.sh
################################################################################

__args=($@)
function _args_parse {
  for arg in "${__args[@]}"; do
    case "$arg" in
      -g|--global)            config[method]='global';;
      -v|--verbose)           config[verbose]=true;;
      -q|--quiet)             config[quiet]=true;;
      --keep-tmp)             config[keep_tmp]=true;;
      install|uninstall|list) config[action]=$arg;;
      *)                      config[repo]=$arg;
    esac
  done
  _args_validate
  if [ "${config[method]}" = "global" ] && [[ $EUID -ne 0 ]] && [ "${config[action]}" != "list" ]; then
    _echoerr "Global install requires root."
    exit 1
  fi
  config[working]="$(pwd)"
}

function _args_validate {
  if ( ! test "${config[action]}" || ! test "${config[repo]}" ) && [ "${config[action]}" != "list" ]; then
    _args_usage
  else
    return 0
  fi
}

function _args_usage {
  echo "
  Usage: $(basename -- "$0") ACTION [--global] REPO

  Actions: install, uninstall, list

  Options:
  --global    -g   Install package globally.
  --verbose   -v   Verbose debug messaging.
  --quiet     -q   Silence all output.
  --keep-tmp       Save install temp directory.

  Examples:

  $(basename -- "$0") install -g jmervine/odbpm-test
  $(basename -- "$0") uninstall -g odbpm-test
  $(basename -- "$0") list -g odbpm-test
  "
  exit 0
}


# Configuration
# file: ./lib/_config.sh
################################################################################
declare -A config=()

# defaults and globals
config[local]='.odbpm'
config[local_bin]="${HOME}/.bin"
config[global]='/usr/local/share/odbpm'
config[global_bin]='/usr/local/bin'
config[method]='local'
config[verbose]=false
config[quiet]=false
config[keep_tmp]=false

function _configure {
  if ! test -f "$1"; then
    _echoerr "Configuration file missing ($1).\n"
    exit 1
  fi
  local file="$1"
  while read line; do
    if test "$line" && (! [[ "$line" =~ ^\# ]]); then
      local key="$(echo $line | awk -F':' '{ print $1 }' | xargs)"
      local val="$(echo $line | awk -F':' '{ print $2 }' | xargs)"
      if [ "$key" != "deps" ]; then
        val="$(echo $val | sed 's/\#.*$//' | xargs)" # strip trailing comments
      fi
      config[$key]=$val
    fi
  done < $file
}


# Fetch Functions
# file: ./lib/_config.sh
################################################################################
function _fetch_mktmp   {
  _verbose "\nCreating install temp."
  config[tmp]="$( mktemp -d /tmp/.odbpm.XXXXXXXXXX )"
  _verbose "=> ${config[tmp]}"
}
function _fetch_cleanup {
  _verbose "\nRemoving install temp."
  _verbose "=> ${config[tmp]}"
  rm -rf "${config[tmp]}"
}
function _fetch_repo {
  local repo="${config[repo]}"
  local version=master
  local regex='#'
  if [[ "$repo" =~ $regex ]]; then
    version="$(echo $repo | awk -F'#' '{ print $2 }' | xargs)"
    repo="$(echo $repo | awk -F'#' '{ print $1 }' | xargs)"
  fi
  local package="$(echo $repo | awk -F'/' '{ print $2 }' | xargs)"
  test -d "${config[tmp]}" || _fetch_mktmp
  cd "${config[tmp]}"

  _message "\nFetching $repo#$version."
  local path="https://github.com/$repo/archive/$version.zip"
  _verbose "=> $path"
  curl -sLOk $path

  local pkg="$version.zip"
  _verbose "\nExtracting package."
  _verbose "=> $pkg"
  out="$( { unzip -qq $pkg; } 2>&1 )"
  if [ "$?" -ne "0" ] || test "$out"; then
    _echoerr "Invalid repo or version: $repo#$version."
    exit 1
  fi

  local cfg="$package-$version/package.conf"
  _verbose "\nReading configuration."
  _verbose "=> $cfg"
  _configure "$cfg"

  _verbose "\nRenaming package."
  _verbose "=> $pkg -> ${config[package]}"
  mv $package-$version "${config[package]}"

  cd "${config[working]}"
}


# Install Functions
# file: ./lib/_install.sh
################################################################################
function _install_with_deps {
  _install
  local deps=(${config[deps]})
  if test "$deps"; then
    local parent_repo="${config[repo]}"
    for dep in "${deps}"; do
      config[repo]="$dep"
      _fetch_repo
      _install
    done
  fi
}

function _install {
  if ! test -d "${config[tmp]}"; then
    _echoerr "Something went wrong, tmp directory not found."
    exit 1
  fi

  local method="${config[method]}"
  local dest="${config[$method]}"
  local package="${config[package]}"
  local main="${config[main]}"
  local bin="${config["${method}_bin"]}"

  if [ "$method" = "local" ]; then _make_local; fi

  _verbose "\nMoving package."
  _verbose "=> ${config[tmp]}/$package ->"
  _verbose "     $method"
  mkdir -p "$dest"
  cp -r "${config[tmp]}/$package" "$dest"

  local working="${config[working]}/$dest"
  if [ "$dest" = "global" ]; then
    working="$dest"
  fi

  if ! test "${config[bin]}"; then
    config[bin]="$main"
  fi
  _verbose "\nEnsuring execute permission."
  _verbose "=> $working/$package/$main"
  chmod 755 "$working/$package/$main"

  declare -a __bins=( $( echo "${config[bin]}" ) )
  _verbose "\nLinking executable."
  for __bin in "${__bins[@]}"; do
    __bin="$bin/$__bin"
    _verbose "=> $working/$package/$main ->"
    _verbose "     $__bin"
    test -L "$__bin" && rm -f "$__bin"
    ln -s "$working/$package/$main" "$__bin"
  done
  _message "\n$package has been installed at:"
  for e in "$execs"; do
    _message " -> $__bin"
  done
}


# List Functions
# file: ./lib/_list.sh
################################################################################
function _list {
  echo "Installed packages:"
  local lib="${config["${config[method]}"]}"
  if [ "${config[method]}" != "global" ]; then
    lib="${config[working]}/$lib"
  fi
  local found=false
  for d in $(find $lib -maxdepth 1 -type d); do
    if [ "$d" != "$lib" ] && test -f "$d/package.conf"; then
      _configure "$d/package.conf"
      found=true
      echo " - ${config[package]}"
    fi
  done
  if ! $found; then echo "No packages found."; fi
}

# Uninstall Functions
# file: ./lib/_uninstall.sh
################################################################################
function _uninstall {
  local repo="${config[repo]}"
  local lib="${config[${config[method]}]}"
  local bin="${config["${config[method]}_bin"]}"
  if [ "${config[method]}" != "global" ]; then
    lib="${config[working]}/$lib"
  fi
  _message "Removing $repo:"
  if test -d $lib/$repo; then
    _configure "$lib/$repo/package.conf"
    _message " -> $lib/$repo"
    rm -rf $lib/$repo
  else
    repo="$(echo $repo | awk -F'/' '{ print $2 }' | xargs)"
    if test -d $lib/$repo; then
      _configure "$lib/$repo/package.conf"
      _message " -> $lib/$repo"
      rm -rf $lib/$repo
    else
      _echoerr "Couldn't find anything to remove."
      exit 1
    fi
  fi
  if test "${config[bin]}"; then
    _message " -> $bin/${config[bin]}"
    rm -f "$bin/${config[bin]}"
  fi
}

# Util Functions
# file: ./lib/_utils.sh
################################################################################
function _echoerr { echo -e "ERROR: $@" 1>&2; }
function _message { if ! "${config[quiet]}"; then echo -e "$@"; fi; }
function _verbose { if "${config[verbose]}"; then echo -e "$@"; fi; }
function _make_local {
  test -d "${config[local]}"     || mkdir "${config[local]}"
  test -d "${config[local_bin]}" || mkdir "${config[local_bin]}"
}

# Exec (aka Core)
# file: ./lib/exec.sh
################################################################################

_args_parse # Parse command line arguments.

case "${config[action]}" in
  install)
    _fetch_repo        # Fetch package repository.
    _install_with_deps # Install fetched package.
    if ! ${config[keep_tmp]}; then
      _fetch_cleanup # Remove package temp.
    fi
    ;;
  uninstall)
    _uninstall;;
  list)
    _list;;
  *)
    _args_usage
esac

################################################################################
# vim: ft=sh:
